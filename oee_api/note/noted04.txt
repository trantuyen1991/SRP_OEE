üìå T·ªïng h·ª£p ti·∫øn tr√¨nh API OEE (topic hi·ªán t·∫°i)
1. C·∫•u tr√∫c & K·∫øt n·ªëi

	API server ch·∫°y FastAPI, t√°ch th√†nh nhi·ªÅu file:

	api.py: router & Swagger/OpenAPI.

	queries.py: build payload, ch·∫°y SQL.

	sql_texts.py: ch·ª©a template SQL.

	utils.py: helper, t√≠nh to√°n OEE, bucket, cache‚Ä¶

	DB truy v·∫•n b·∫±ng SQLAlchemy (ODBC ch·ªâ d√πng cho AVEVA).

2. Scope & Time Window

	Chuy·ªÉn t·ª´ gran sang scope (minute/day/week/month/quarter/year/between).

	Quy ∆∞·ªõc:

	minute: c·∫ßn since_min.

	between: c·∫ßn from_ts & to_ts.

	C√°c scope c√≤n l·∫°i API t·ª± t√≠nh from/to (00:00 ‚Üí now, Mon 00:00 ‚Üí now,‚Ä¶).

	Linechart auto-bucketing: ch·ªçn bucket_sec = ceil(range_sec/limit) l√†m tr√≤n l√™n ph√∫t.

	Gauges t√≠nh tr√™n to√†n b·ªô ph·∫°m vi.

3. Cache

	T√≠ch h·ª£p in-process TTL cache:

	Key = (line_id, scope/gran, from_ts, to_ts floored, filters, include‚Ä¶).

	TTL m·∫∑c ƒë·ªãnh 15‚Äì30s, c·ª≠a s·ªï key (floor dt_to) m·∫∑c ƒë·ªãnh 10s.

	C√≥ log CACHE HIT/MISS/SET ƒë·ªÉ ki·ªÉm ch·ª©ng.

	ƒê·∫£m b·∫£o tr√°nh None/NaN khi normalize ‚Üí lu√¥n tr·∫£ v·ªÅ 0.0 ho·∫∑c s·ªë %.

4. T√≠nh to√°n OEE

	Th·ªëng nh·∫•t c√¥ng th·ª©c trong 1 h√†m duy nh·∫•t: compute_oee() (utils.py).

	Input = OeeInputs g·ªìm: good, reject, runtime_sec, downtime_sec, ideal_rate_per_min, ideal_capacity_cnt.

	Logic:

	Availability = runtime / (runtime+downtime).

	Quality = good / (good+reject).

	Performance:

	N·∫øu c√≥ ideal_capacity_cnt (plant-level) ‚Üí d√πng t·ªïng c√¥ng su·∫•t l√Ω thuy·∫øt.

	Ng∆∞·ª£c l·∫°i (line-level) ‚Üí d√πng rate * runtime.

	OEE = A * P * Q.

	Output: % (2 decimal) ho·∫∑c 0.0 khi thi·∫øu d·ªØ li·ªáu.

5. SQL ch·ªânh s·ª≠a

	Trong GAUGES & SERIES_* th√™m:

	MAX(p.ideal_rate_per_min) AS ideal_rate_per_min,
	SUM(p.ideal_rate_per_min * f.runtime_sec/60.0) AS ideal_capacity_cnt


	Nh·ªù v·∫≠y compute_oee t·ª± x·ª≠ l√Ω ƒë√∫ng cho c·∫£ line-level & plant-level.

6. Kh√°c

	Th·ªëng nh·∫•t null/undefined ‚Üí tr·∫£ v·ªÅ 0.0 ƒë·ªÉ chart kh√¥ng l·ªói.

	Swagger/OpenAPI hi·ªÉn th·ªã r√µ scope, filters, include, limit, v√≠ d·ª• cho Postman/Swagger UI.

	Logging chi ti·∫øt t·ª´ng b∆∞·ªõc (range_sec, bucket_sec, s·ªë ƒëi·ªÉm linechart, totals gauges‚Ä¶).

‚úÖ K·∫øt qu·∫£

	API server hi·ªán ƒë√£:

	H·ªó tr·ª£ scope-first request.

	T√≠ch h·ª£p cache TTL ho·∫°t ƒë·ªông.

	T√≠nh to√°n OEE chu·∫©n cho c·∫£ line v√† plant.

	Tr√°nh l·ªói null/NaN cho frontend.

	D·ªÖ m·ªü r·ªông sau n√†y (summary tables, Redis cache, view ri√™ng‚Ä¶).
	
	
7. C√°c m·ª•c ti√™u ph√°t tri·ªÉn ti·∫øp theo:

	A. B·ªï sung API m·ªõi cung c·∫•p d·ªØ li·ªáu cho c√°c bi·ªÉu ƒë·ªì kh√°c nh∆∞ race chart-downtime, gantt-machine status, pareto...

	B. T·ªëi ∆∞u hi·ªáu nƒÉng (index DB, summary tables).

	C. Xu·∫•t b√°o c√°o/t√≠ch h·ª£p dashboard (ECharts/ThingsBoard).

	D. T√≠ch h·ª£p b·∫£o m·∫≠t (API key, JWT).
	